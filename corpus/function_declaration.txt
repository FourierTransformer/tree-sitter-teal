==============================
Anonymous
==============================

local foo = function()
end

---

(program
  (var_declaration (var (identifier)) (functiondef)))

==============================
Named
==============================

local function foo()

end

---

(program
  (function_statement (function_name)))

==============================
A function that actually does something
==============================

local function bar()
   local x = 3
   local y = {
      z = function()
         local x = 1
      end,
      w = function()
      end,
   }
end

---

(program
  (function_statement (function_name)
    (var_declaration (var (identifier)) (number))
    (var_declaration (var (identifier)) (table_constructor
      (table_key) (table_value (functiondef
        (var_declaration (var (identifier)) (number))))
      (table_key) (table_value (functiondef))))))


==============================
A function that returns
==============================

local function bar()
   local x = "hello"
   return x
end

---

(program
  (function_statement (function_name)
    (var_declaration (var (identifier)) (string))
    (retstat (identifier))))


==============================
A function with args
==============================

local function foo(bar, baz)
   return bar, baz
end

---

(program 
  (function_statement (function_name)
    (arg_name) (arg_name)
    (retstat (identifier) (identifier))))

==============================
A function with typed args
==============================

local function foo(bar: string, baz: number)
   return bar, baz
end

---

(program 
  (function_statement (function_name)
    (arg_name) (simple_type)
    (arg_name) (simple_type)
    (retstat (identifier) (identifier))))

==============================
A function with typed returns
==============================

local function foo(): string, number
end

---

(program 
  (function_statement (function_name) (ret (simple_type) (simple_type))))

==============================
A function in a table/record
==============================

function foo.bar()
end

---

(program 
  (function_statement (function_name (base) (entry))))

==============================
A method in a table/record
==============================

function foo:bar()
end

---

(program 
  (function_statement (function_name (base) (method))))

==============================
Argument with typearg
==============================

local function parse_list<T>(ps: ParseState, i: number, list: {T}, close: {string:boolean}, sep: SeparatorMode, parse_item: ParseItem<T>): number, {T}
end

---

(program (function_statement (function_name) (typearg)
  (arg_name) (simple_type)
  (arg_name) (simple_type)
  (arg_name) (table_type
    value_type: (simple_type))
  (arg_name) (table_type
    key_type: (simple_type)
    value_type: (simple_type))
  (arg_name) (simple_type)
  (arg_name) (simple_type (typearg))
  (ret (simple_type) (table_type value_type: (simple_type)))))
