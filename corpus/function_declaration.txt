==============================
Anonymous
==============================

local foo = function()
end

---

(program
  (var_declaration (var (identifier))
  (anon_function (function_signature) (function_body))))

==============================
Named
==============================

local function foo()
end

---

(program
  (function_statement name: (identifier) (function_signature) (function_body)))

==============================
A function that actually does something
==============================

local function bar()
   local x = 3
   local y = {
      z = function()
         local x = 1
      end,
      w = function()
      end,
   }
end

---

(program
  (function_statement name: (identifier) (function_signature) (function_body
    (var_declaration (var (identifier)) (number))
    (var_declaration (var (identifier)) (table_constructor
      (table_key) (table_value (anon_function (function_signature) (function_body
        (var_declaration (var (identifier)) (number)))))
      (table_key) (table_value (anon_function (function_signature) (function_body))))))))


==============================
A function that returns
==============================

local function bar()
   local x = "hello"
   return x
end

---

(program
  (function_statement name: (identifier) (function_signature) (function_body
    (var_declaration (var (identifier)) (string))
    (return_statement (identifier)))))


==============================
A function with args
==============================

local function foo(bar, baz)
   return bar, baz
end

---

(program 
  (function_statement name: (identifier)
    (function_signature
      (arguments (arg name: (identifier)) (arg name: (identifier))))
    (function_body
      (return_statement (identifier) (identifier)))))

==============================
A function with typed args
==============================

local function foo(bar: string, baz: number)
   return bar, baz
end

---

(program 
  (function_statement
    name: (identifier)
    (function_signature
      (arguments
        (arg name: (identifier) type: (simple_type))
        (arg name: (identifier) type: (simple_type))))
    (function_body
      (return_statement (identifier) (identifier)))))

==============================
A function with typed returns
==============================

local function foo(): string, number
end

---

(program 
  (function_statement name: (identifier) (function_signature
  (return_type (simple_type) (simple_type))) (function_body)))

==============================
A function in a table/record
==============================

function foo.bar()
end

---

(program 
  (function_statement
    name: (function_name
      base: (identifier)
      entry: (identifier))
    (function_signature) (function_body)))

==============================
A method in a table/record
==============================

function foo:bar()
end

---

(program 
  (function_statement
    name: (function_name base: (identifier) method: (identifier))
    (function_signature) (function_body)))

==============================
Argument with typearg
==============================

local function parse_list<T>(ps: ParseState, i: number, list: {T}, close: {string:boolean}, sep: SeparatorMode, parse_item: ParseItem<T>): number, {T}
end

---

(program (function_statement name: (identifier)
  (function_signature
    (typeargs (identifier))
    (arguments
      (arg name: (identifier) type: (simple_type))
      (arg name: (identifier) type: (simple_type))
      (arg name: (identifier) type: (table_type
        value_type: (simple_type)))
      (arg name: (identifier) type: (table_type
        key_type: (simple_type)
        value_type: (simple_type)))
      (arg name: (identifier) type: (simple_type))
      (arg name: (identifier) type: (simple_type (typeargs (identifier)))))
    (return_type (simple_type) (table_type value_type: (simple_type))))
  (function_body)))

==============================
Variadic argument
==============================

local function thing(...: number)
end

---

(program
  (function_statement
    name: (identifier)
    (function_signature (arguments (varargs) (simple_type)))
    (function_body)))

==============================
Variadic return
==============================

local function thing(): string...
end

---

(program
  (function_statement
    name: (identifier)
    (function_signature (return_type (simple_type) (vararg)))
    (function_body)))
