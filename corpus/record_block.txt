
==============================
Empty record
==============================

local type foo = record
end

---

(program (type_declaration (type_name) (anon_record (record_body))))

==============================
Empty record (shorthand)
==============================

local record foo
end

---

(program (record_declaration (record_name) (record_body)))

==============================
Record with stuff
==============================

local type foo = record
   bar: {number}
   baz: string
end

---

(program (type_declaration (type_name) (anon_record (record_body
  (record_entry) (table_type
    value_type: (simple_type))
  (record_entry) (simple_type)))))

==============================
Arrayrecord with stuff
==============================

local type foo = record
   {thread}
   bar: {number}
   baz: string
end

---

(program (type_declaration (type_name) (anon_record (record_body
  (record_array_type (simple_type))
  (record_entry) (table_type value_type: (simple_type))
  (record_entry) (simple_type)))))

==============================
Nested records
==============================

local type foo = record
   type bar = record
      x: number
   end
   baz: bar
end

---

(program (type_declaration (type_name) (anon_record (record_body
  (record_type) (anon_record (record_body
    (record_entry) (simple_type)))
  (record_entry) (simple_type)))))

==============================
Generic record
==============================

local type foo = record<T>
   foo: T
end

---

(program
   (type_declaration (type_name)
   (anon_record
      (typeargs (identifier))
      (record_body
        (record_entry) (simple_type)))))

==============================
Record with a 'type' entry
==============================

local type foo = record
   type: number
end

---

(program (type_declaration (type_name) (anon_record (record_body
  (record_entry) (simple_type)))))

==============================
Record with a 'type' entry and types
==============================

local type foo = record
   type: number
   type bar = record
   end
   type baz = enum
      "foo" "bar"
   end
end

---

(program (type_declaration (type_name) (anon_record (record_body
  (record_entry) (simple_type)
  (record_type) (anon_record (record_body))
  (record_type) (enum_block
    (string) (string))))))

==============================
Nested record shorthand syntax
==============================

local record Foo
   record Bar

   end
end

---

(program (record_declaration (record_name) (record_body
  (record_block (record_name) (record_body)))))

==============================
Record with a 'record' entry
==============================

local record Foo
   record: number
end

---

(program (record_declaration (record_name) (record_body
  (record_entry) (simple_type))))

==============================
Record with a 'enum' entry
==============================

local record Foo
   enum: number
end

---

(program (record_declaration (record_name) (record_body
  (record_entry) (simple_type))))

==============================
Record with ['entry']
==============================

local record Foo
   ["things"]: number
end

---

(program (record_declaration (record_name) (record_body
  (string) (simple_type))))
