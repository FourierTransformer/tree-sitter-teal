
==============================
Empty
==============================

local t = {}

---

(program
  (var_declaration (var) (table_constructor)))

==============================
Array
==============================

local arr = {1, 2, 3}

---

(program
  (var_declaration (var)
    (table_constructor
      (table_value (number))
      (table_value (number))
      (table_value (number)))))

==============================
Identifier-Map
==============================

local arr = {
  x = 5,
  y = 6,
}

---

(program
  (var_declaration (var)
    (table_constructor
      (table_key) (table_value (number))
      (table_key) (table_value (number)))))

==============================
Value-Map
==============================

local arr = {
  ["x"] = 5,
  [y] = 6,
}

---

(program
  (var_declaration (var)
    (table_constructor
      (table_key (string)) (table_value (number))
      (table_key (identifier)) (table_value (number)))))

==============================
Nested
==============================

local arr = {
    foo = {
        bar = "a",
        baz = "b",
    },
    [{}] = {};
}

---

(program
  (var_declaration (var)
    (table_constructor
      (table_key) (table_value (table_constructor
        (table_key) (table_value (string))
        (table_key) (table_value (string))))
      (table_key (table_constructor)) (table_value (table_constructor)))))

==============================
With type annotations
==============================

local tl = {
   process: function(string, Env, Result, {string}): (Result, string) = nil,
}

---

(program
  (var_declaration (var) (table_constructor
    (table_key) (function_type
      (arg (simple_type) (simple_type) (simple_type) (table_type value_type: (simple_type)))
      (ret (simple_type) (simple_type)))
    (table_value (nil)))))

